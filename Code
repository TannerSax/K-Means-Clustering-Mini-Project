# This mini-project is based on the K-Means exercise from 'R in Action'
# Go here for the original blog post and solutions
# http://www.r-bloggers.com/k-means-clustering-from-r-in-action/

# Exercise 0: Install these packages if you don't have them already

install.packages(c("cluster", "rattle.data","NbClust"))

# Now load the data and look at the first few rows
data(wine, package="rattle.data")
head(wine)

# Exercise 1: Remove the first column from the data and scale
# it using the scale() function

wine_df <- scale(wine[-1])

# Now we'd like to cluster the data using K-Means. 
# How do we decide how many clusters to use if you don't know that already?
# We'll try two methods.

# Method 1: A plot of the total within-groups sums of squares against the 
# number of clusters in a K-means solution can be helpful. A bend in the 
# graph can suggest the appropriate number of clusters. 

wssplot <- function(data, nc=15, seed=1234){
  wss <- (nrow(wine_df)-1)*sum(apply(wine_df,2,var))
  for (i in 2:nc){
    set.seed(seed)
    wss[i] <- sum(kmeans(wine_df, centers=i)$withinss)}
  plot(1:nc, wss, type="b", xlab="Number of Clusters",
       ylab="Within groups sum of squares")}

wssplot(df)

# Exercise 2:
#   * How many clusters does this method suggest?
#     This method suggests three clusters.

#   * Why does this method work? What's the intuition behind it?
# This method works becaus the observations are partitioned into k groups,
# and the number of clusters that produce the least sum of squares value 
# is the most effective. Therefore, since the curve begins to level off 
# around three clusters, then this number is a good fit. 

#   * Look at the code for wssplot() and figure out how it works
# The function sets the maximum number of clusters at 15 with nc. 
# The random seed is set at 1234. The within groups sum of squares 
# variable is calculated by multiplying the number of rows by the variance
# of the data. Next, the kmeans function is used for every number of 
# clusters up to the maximum of 15.The sum of the within groups sum
# of squares is iterated over for each cluster. The data is plotted
# for the number of clusters agains the sum of squares within groups.



# Method 2: Use the NbClust library, which runs many experiments
# and gives a distribution of potential number of clusters.

library(NbClust)
set.seed(1234)
nc <- NbClust(wine_df, min.nc=2, max.nc=15, method="kmeans")
barplot(table(nc$Best.n[1,]),
	          xlab="Numer of Clusters", ylab="Number of Criteria",
		            main="Number of Clusters Chosen by 26 Criteria")


# Exercise 3: How many clusters does this method suggest?
# This method suggests 3 clusters.

# Exercise 4: Once you've picked the number of clusters, run k-means 
# using this number of clusters. Output the result of calling kmeans()
# into a variable fit.km

fit.km <- kmeans(wine_df, centers = 3)

# Now we want to evaluate how well this clustering does.

# Exercise 5: using the table() function, show how the clusters in fit.km$clusters
# compares to the actual wine types in wine$Type. Would you consider this a good
# clustering?
fit.km$cluster
wine$Type
table(fit.km$cluster, wine$Type)

# I would consider this a good cluster. The results seem off because the
# clusters are labeled beginning with 3 and ending with 1, and the types are
# labeled opposite from 1 to 3. Taking this into consideration, there are
# three values in the second cluster that belong in type 1 and three values 
# in the second cluster that belong in type 3. 


# Exercise 6:
# * Visualize these clusters using  function clusplot() from the cluster library
# * Would you consider this a good clustering?
library(cluster)
plot(fit.km$cluster)
# There are several outlies in the first and third clusters,
# however overall I would consider this a good clustering. 
